import unittest
import os
import numpy as np
import lsst.utils.tests

from lsst.utils import getPackageDir
from lsst.afw.cameraGeom import PIXELS, FOCAL_PLANE, SCIENCE
import lsst.afw.geom as afwGeom
from lsst.sims.coordUtils import lsst_camera
from lsst.sims.coordUtils import focalPlaneCoordsFromPupilCoordsLSST
from lsst.sims.coordUtils import DMtoCameraPixelTransformer


def setup_module(module):
    lsst.utils.tests.init()


class FocalPlaneTestCase(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        pix_transformer = DMtoCameraPixelTransformer()
        data_dir = os.path.join(getPackageDir('sims_data'),
                                'FocalPlaneData',
                                'UnitTestData')

        cls._data_dir = data_dir

        phosim_dtype = np.dtype([('id', int), ('phot', int),
                                 ('xpix', float), ('ypix', float)])

        camera = lsst_camera()
        cls._phosim_positions = {}
        for i_band in range(6):
            id_arr = None
            x_arr = None
            y_arr = None
            for det in camera:
                if det.getType() != SCIENCE:
                    continue
                det_name = det.getName()
                name = det_name.replace(':','').replace(',','')
                name = name.replace(' ','_')
                file_name = 'centroid_lsst_e_2_f%d_%s_E000.txt' % (i_band, name)
                data = np.genfromtxt(os.path.join(data_dir, 'PhoSimData',
                                                  file_name),
                                     dtype=phosim_dtype,
                                     skip_header=1)
                dm_x, dm_y = pix_transformer.dmPixFromCameraPix(data['xpix'],
                                                                data['ypix'],
                                                                det_name)
                pix_to_focal = det.getTransform(PIXELS, FOCAL_PLANE)
                x_mm = np.zeros(len(dm_x))
                y_mm = np.zeros(len(dm_y))
                for ii in range(len(x_mm)):
                    pix_pt = afwGeom.Point2D(dm_x[ii], dm_y[ii])
                    focal_pt = pix_to_focal.applyForward(pix_pt)
                    x_mm[ii] = focal_pt.getX()
                    y_mm[ii] = focal_pt.getY()

                if id_arr is None:
                    id_arr = data['id']
                    x_arr = x_mm
                    y_arr = y_mm
                else:
                    id_arr = np.append(id_arr, data['id'])
                    x_arr = np.append(x_arr, x_mm)
                    y_arr = np.append(y_arr, y_mm)

            sorted_dex = np.argsort(id_arr)
            id_arr = id_arr[sorted_dex]
            x_arr = x_arr[sorted_dex]
            y_arr = y_arr[sorted_dex]
            cls._phosim_positions[i_band] = {}
            cls._phosim_positions[i_band]['id'] = id_arr
            cls._phosim_positions[i_band]['xmm'] = x_arr
            cls._phosim_positions[i_band]['ymm'] = y_arr

    @classmethod
    def tearDownClass(cls):
        if hasattr(focalPlaneCoordsFromPupilCoordsLSST, '_z_fitter'):
            del focalPlaneCoordsFromPupilCoordsLSST._z_fitter

        if hasattr(lsst_camera, '_lsst_camera'):
            del lsst_camera._lsst_camera

    def test_focal_plane_from_pupil(self):
        """
        Test conversion from pupil coords to focal plane coords
        using data generated by PhoSim
        """
        catsim_dtype = np.dtype([('id', int),
                                 ('xmm', float), ('ymm', float),
                                 ('xpup', float), ('ypup', float),
                                 ('raObs', float), ('decObs', float)])

        catsim_data = np.genfromtxt(os.path.join(self._data_dir, 'CatSimData',
                                                 'predicted_positions.txt'),
                                    dtype=catsim_dtype)

        for i_band, band in enumerate('ugrizy'):
            np.testing.assert_array_equal(catsim_data['id'],
                                          self._phosim_positions[i_band]['id'])

            xmm, ymm = focalPlaneCoordsFromPupilCoordsLSST(catsim_data['xpup'],
                                                           catsim_data['ypup'],
                                                           band)

            distance = np.sqrt((xmm-self._phosim_positions[i_band]['xmm'])**2 +
                               (ymm-self._phosim_positions[i_band]['ymm'])**2)

            self.assertLess(distance.max(), 0.01)
            print(band,distance.max()/0.01)


class MemoryTestClass(lsst.utils.tests.MemoryTestCase):
    pass


if __name__ == "__main__":
    lsst.utils.tests.init()
    unittest.main()
